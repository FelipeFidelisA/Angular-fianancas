{"ast":null,"code":"import { Injector } from '@angular/core';\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BaseResourceService } from \"../../services/base-resource.service\";\nimport { switchMap } from \"rxjs/operators\";\nimport toastr from \"toastr\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/base-resource.service\";\nexport let BaseResourceFormComponent = /*#__PURE__*/(() => {\n  class BaseResourceFormComponent {\n    constructor(injector, resource, resourceService, jsonDataToResourceFn) {\n      this.injector = injector;\n      this.resource = resource;\n      this.resourceService = resourceService;\n      this.jsonDataToResourceFn = jsonDataToResourceFn;\n      this.serverErrorMessages = null;\n      this.submittingForm = false;\n      this.route = this.injector.get(ActivatedRoute);\n      this.router = this.injector.get(Router);\n      this.formBuilder = this.injector.get(FormBuilder);\n    }\n    ngOnInit() {\n      this.setCurrentAction();\n      this.buildResourceForm();\n      this.loadResource();\n    }\n    ngAfterContentChecked() {\n      this.setPageTitle();\n    }\n    submitForm() {\n      this.submittingForm = true;\n      if (this.currentAction == \"new\") this.createResource();else this.updateResource();\n    }\n    // PRIVATE METHODS\n    setCurrentAction() {\n      if (this.route.snapshot.url[0].path == \"new\") this.currentAction = \"new\";else this.currentAction = \"edit\";\n    }\n    loadResource() {\n      if (this.currentAction == \"edit\") {\n        this.route.paramMap.pipe(switchMap(params => this.resourceService.getById(+params.get(\"id\")))).subscribe(resource => {\n          this.resource = resource;\n          this.resourceForm.patchValue(resource); // binds loaded resource data to resourceForm\n        }, error => alert('Ocorreu um erro no servidor, tente mais tarde.'));\n      }\n    }\n    setPageTitle() {\n      if (this.currentAction == 'new') this.pageTitle = this.creationPageTitle();else {\n        this.pageTitle = this.editionPageTitle();\n      }\n    }\n    creationPageTitle() {\n      return \"Novo\";\n    }\n    editionPageTitle() {\n      return \"Edição\";\n    }\n    createResource() {\n      const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n      this.resourceService.create(resource).subscribe(resource => this.actionsForSuccess(resource), error => this.actionsForError(error));\n    }\n    updateResource() {\n      const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n      this.resourceService.update(resource).subscribe(resource => this.actionsForSuccess(resource), error => this.actionsForError(error));\n    }\n    actionsForSuccess(resource) {\n      toastr.success(\"Solicitação processada com sucesso!\");\n      const baseComponentPath = this.route.snapshot.parent.url[0].path;\n      // redirect/reload component page\n      this.router.navigateByUrl(baseComponentPath, {\n        skipLocationChange: true\n      }).then(() => this.router.navigate([baseComponentPath, resource.id, \"edit\"]));\n    }\n    actionsForError(error) {\n      toastr.error(\"Ocorreu um erro ao processar a sua solicitação!\");\n      this.submittingForm = false;\n      if (error.status === 422) this.serverErrorMessages = JSON.parse(error._body).errors;else this.serverErrorMessages = [\"Falha na comunicação com o servidor. Por favor, tente mais tarde.\"];\n    }\n  }\n  BaseResourceFormComponent.ɵfac = function BaseResourceFormComponent_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  BaseResourceFormComponent.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BaseResourceFormComponent\n  });\n  return BaseResourceFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}